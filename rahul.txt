import boto3
import json

# Initialize Boto3 clients
sts_client = boto3.client('sts')
secrets_client = boto3.client('secretsmanager')

# Define account role ARNs
ROLE_ARNS = {
    "alpha": "arn:aws:iam::401681077342:role/rotate_access",
    "beta": "arn:aws:iam::891612586321:role/rotatekey",
    # Add other accounts here if needed
}

IAM_USER_NAMES = ["dummy", "dummysec"]  # List of IAM usernames to manage keys for

# Hardcoded SecretId
SECRET_ID = "test"  # Replace with your actual SecretId

def lambda_handler(event, context):
    # Use the hardcoded SecretId
    secret_id = SECRET_ID

    # Retrieve the existing secret value
    try:
        existing_secret = secrets_client.get_secret_value(SecretId=secret_id)
        if 'SecretString' in existing_secret:
            secret_data = json.loads(existing_secret['SecretString'])
        else:
            secret_data = {}
    except Exception as e:
        print(f"Error retrieving secret {secret_id}: {str(e)}")
        return

    # Iterate over each account configuration (alpha, beta, etc.)
    for account_alias, role_arn in ROLE_ARNS.items():
        # Assume role in target account
        assumed_role = sts_client.assume_role(
            RoleArn=role_arn,
            RoleSessionName=f"AssumeRoleSession-{account_alias}"
        )
        
        # Retrieve temporary credentials
        credentials = assumed_role['Credentials']
        
        # Create an IAM client in the target account with assumed role credentials
        iam_client = boto3.client(
            'iam',
            aws_access_key_id=credentials['AccessKeyId'],
            aws_secret_access_key=credentials['SecretAccessKey'],
            aws_session_token=credentials['SessionToken']
        )

        # Iterate over the list of IAM users
        for iam_user_name in IAM_USER_NAMES:
            try:
                # List and delete old access keys
                existing_keys = iam_client.list_access_keys(UserName=iam_user_name)['AccessKeyMetadata']
                for key in existing_keys:
                    iam_client.delete_access_key(UserName=iam_user_name, AccessKeyId=key['AccessKeyId'])
                    print(f"Deleted old access key {key['AccessKeyId']} for {iam_user_name} in {account_alias}.")

                # Create a new access key for the IAM user
                new_key = iam_client.create_access_key(UserName=iam_user_name)['AccessKey']
                new_access_key_id = new_key['AccessKeyId']
                new_secret_access_key = new_key['SecretAccessKey']
                
                # Update only the specific key-value pairs in the secret data
                secret_data[f"{iam_user_name}.{account_alias}.accesskey"] = new_access_key_id
                secret_data[f"{iam_user_name}.{account_alias}.SecretAccessKey"] = new_secret_access_key

            except Exception as e:
                print(f"Error managing access keys for {iam_user_name} in {account_alias}: {str(e)}")
    
    # Convert the updated secret data to a JSON formatted string
    updated_secret_string = json.dumps(secret_data)

    # Update the provided secret with the modified data
    try:
        secrets_client.update_secret(
            SecretId=secret_id,
            SecretString=updated_secret_string
        )
        print(f"Updated secret {secret_id} successfully.")
    except Exception as e:
        print(f"Error updating secret {secret_id}: {str(e)}")

==================================================================================================================================]

robocopy

# Load the AWS PowerShell Module (Ensure the AWS CLI is configured with proper credentials)
#Import-Module AWSPowerShell

# Fetch secret from AWS Secrets Manager
$SecretName = "test"  # Replace with your actual secret name
$Region = "ap-south-1"  # Replace with your AWS region

# Retrieve the secret
$SecretValue = Get-SECSecretValue -SecretId $SecretName -Region $Region

# Parse the secret value (assuming it is a JSON string with the keys 'AdminUserName' and 'AdminPassword')
$Secret = ConvertFrom-Json $SecretValue.SecretString

# Define Variables (fetched from Secrets Manager)
$SourcePath = "C:\manas\"
$MachineNames = "EC2AMAZ-52FKVRM"
$AdminUserName = $Secret.AdminUserName  # Set from AWS Secret
$AdminPassword = $Secret.AdminPassword  # Set from AWS Secret
$TargetPath = "C:\Target\"
$CleanTargetBeforeCopy = $true
$CopyFilesInParallel = $false

# Convert password to SecureString
$SecurePassword = ConvertTo-SecureString $AdminPassword -AsPlainText -Force

# Define credentials
$Credential = New-Object System.Management.Automation.PSCredential($AdminUserName, $SecurePassword)

# Function to Copy Files using Robocopy
function Copy-WebFiles {
    param (
        [string]$Source,
        [string]$Destination,
        [string]$Machine
    )

    # If CleanTargetBeforeCopy is true, we delete the target folder before copying
    if ($CleanTargetBeforeCopy) {
        Write-Host "Cleaning target directory: $Destination"
        Remove-Item -Recurse -Force -Path $Destination
    }

    # Build Robocopy command
    $robocopyCommand = "robocopy `"$Source`" `"$Destination`" /MIR /Z /XA:H /W:5 /R:3"

    # Execute the robocopy command
    Write-Host "Copying files to $Machine\$Destination"
    Invoke-Command -ComputerName $Machine -Credential $Credential -ScriptBlock {
        param($cmd)
        Invoke-Expression $cmd
    } -ArgumentList $robocopyCommand
}

# Iterate over each target server and copy the files
$MachineNames.Split(',') | ForEach-Object {
    $Machine = $_.Trim()

    if ($CopyFilesInParallel) {
        # Using background jobs to copy files in parallel
        Start-Job -ScriptBlock {
            param($Source, $Destination, $Machine)
            Copy-WebFiles -Source $Source -Destination $Destination -Machine $Machine
        } -ArgumentList $SourcePath, $TargetPath, $Machine
    } else {
        # Perform copying sequentially
        Copy-WebFiles -Source $SourcePath -Destination $TargetPath -Machine $Machine
    }
}

# Wait for all background jobs to complete if running in parallel mode
if ($CopyFilesInParallel) {
    Get-Job | Wait-Job
}


=========================================================================================================================================================================
Write powershell script  of below azure pipeline task

variables:
  WebDeployPackageName: 'ROUX.API.zip'
steps:
- task: ms-vscs-rm.iiswebapp.iiswebappdeploy-task. IISWebAppDeploy@1 
  displayName: 'Deploy IIS App: $ (WebDeploy PackageName) '
  inputs:
    machinesList: '$ (TargetWebServers)'
    AdminUserName: '$ (TFSBuildSALogin)'
    AdminPassword: '$ (TFSBuildSAPassword)'
    WinRMProtocol: Http
    WebDeployPackage: '$ (WebDeployTargetFolder) \$ (WebDeployPackageName)'
    WebsiteName: '$ (WebSiteName)'
    RemoveAdditionalFiles: true
    ExcludeFilesFromAppData: true
    TakeAppOffline: true
    DeployInParallel: false
	


WebSiteName	                 Name of the IIS website where the application will be deployed.
VirtualApplication	         (Optional) Virtual directory or application under the IIS website.
Package	                     Path to the deployment package or files to be deployed.
RemoveAdditionalFilesFlag	 Removes files from the destination directory that are not part of the deployment package.
TakeAppOfflineFlag	         Temporarily takes the application offline during deployment (places app_offline.htm).
SetParametersFile	         Path to the parameters file for transforming deployment settings.
AdditionalArguments	         Extra arguments to pass to the deployment process.
XmlTransformation	         Applies XML transformations (e.g., web.config transformations).
XmlVariableSubstitution	     Replaces tokens in configuration files with pipeline variables.
EnableCustomDeployment	     Runs a custom PowerShell script during deployment.


	
# Define Variables (Replace these with actual values or environment variables)
$MachinesList = "EC2AMAZ-QI688ID"                          # List of target machines
$AdminUserName = "Administrator"                           # Admin username
$AdminPassword = "kIgzNRLn)ZaAW597%Abvr8(a=@J5G?P&"        # Admin password
$WinRMProtocol = "Http"                                    # Protocol for WinRM (Http or Https)
$WebDeployPackage = "C:\Target\static.zip"                            # Deployment package path
$WebsiteName = "reactapp"                                  # IIS Website name
$RemoveAdditionalFiles = $true                             # Remove additional files
$ExcludeFilesFromAppData = $true                           # Exclude files in App_Data
$TakeAppOffline = $true                                    # Take the app offline during deployment
$DeployInParallel = $false                                 # Deploy to multiple servers in parallel

# Convert password to SecureString
$SecurePassword = ConvertTo-SecureString $AdminPassword -AsPlainText -Force

# Create credentials object
$Credential = New-Object System.Management.Automation.PSCredential($AdminUserName, $SecurePassword)

# Function to Deploy IIS Web App
function Deploy-IISWebApp {
    param (
        [string]$Machine,
        [string]$PackagePath,
        [string]$SiteName,
        [PSCredential]$Credential
    )

    # PowerShell Remoting ScriptBlock for Deployment
    $ScriptBlock = {
        param (
            $PackagePath,
            $SiteName,
            $RemoveAdditionalFiles,
            $ExcludeFilesFromAppData,
            $TakeAppOffline
        )
        # Import Web Deploy Module
        Import-Module WebAdministration

        Write-Host "Deploying to IIS site: $SiteName"

        # Stop the site temporarily if TakeAppOffline is true
        if ($TakeAppOffline) {
            Write-Host "Stopping IIS site: $SiteName"
            Stop-Website -Name $SiteName
        }

        # Clean additional files if RemoveAdditionalFiles is true
        if ($RemoveAdditionalFiles) {
            Write-Host "Cleaning files in target directory"
            Remove-Item "C:\manas\*" -Recurse -Force
        }

        # Extract the deployment package
        Write-Host "Extracting package: $PackagePath"
        Expand-Archive -Path $PackagePath -DestinationPath "C:\manas\" -Force

        # Exclude files from App_Data if specified
        if ($ExcludeFilesFromAppData) {
            Write-Host "Excluding files in App_Data"
            Remove-Item "C:\manas\.txt*" -Recurse -Force
        }

        # Start the site after deployment
        Write-Host "Starting IIS site: $SiteName"
        Start-Website -Name $SiteName
    }

    # Invoke Command on Target Machine
    Write-Host "Deploying to machine: $Machine"
    Invoke-Command -ComputerName $Machine -Credential $Credential -ScriptBlock $ScriptBlock -ArgumentList $PackagePath, $SiteName, $RemoveAdditionalFiles, $ExcludeFilesFromAppData, $TakeAppOffline
}

# Deploy to each machine in the MachinesList
$Machines = $MachinesList.Split(',')

if ($DeployInParallel) {
    # Parallel Deployment
    $Jobs = @()
    foreach ($Machine in $Machines) {
        $Jobs += Start-Job -ScriptBlock {
            param($Machine, $WebDeployPackage, $WebsiteName, $Credential)
            Deploy-IISWebApp -Machine $Machine -PackagePath $WebDeployPackage -SiteName $WebsiteName -Credential $Credential
        } -ArgumentList $Machine, $WebDeployPackage, $WebsiteName, $Credential
    }

    # Wait for all jobs to complete
    $Jobs | Wait-Job | Receive-Job
} else {
    # Sequential Deployment
    foreach ($Machine in $Machines) {
        Deploy-IISWebApp -Machine $Machine.Trim() -PackagePath $WebDeployPackage -SiteName $WebsiteName -Credential $Credential
    }
}

=========================================================================================================================================================================



version: 0.2

phases:
  install:
    runtime-versions:
      # Specify the runtime you are using, for example, Node.js or Python
      # nodejs: 14
    commands:
      # Any additional commands required to set up the environment
      echo "Installing dependencies..."

  pre_build:
    commands:
      # Replacing the appspec.yml in the root directory with the one in CD-appspec folder
      echo "Replacing appspec.yml in the root directory..."
      cp CD-appspec/appspec.yml appspec.yml  # Replace root appspec.yml with the one in the CD-appspec folder

  build:
    commands:
      echo "Building the source code..."
      # You can run build commands if required, for example:
      # npm install
      # npm run build

  post_build:
    commands:
      echo "Build completed successfully!"
      # Ensure the changes (appspec.yml replacement) are included in the output artifact
      echo "Preparing source code for output artifact..."
  
artifacts:
  files:
    - '**/*'  # Include everything from the source directory, including the updated appspec.yml
  discard-paths: no  # Retain the directory structure in the artifact










