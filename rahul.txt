$accessKey = (aws secretsmanager get-secret-value --secret-id "mytest" --region "us-east-1" --query "SecretString" --output text | ConvertFrom-Json).accesskey

Write-Output $accessKey



------------------------------------------------------------------

import boto3
import json

# Initialize Boto3 clients
sts_client = boto3.client('sts')
secrets_client = boto3.client('secretsmanager')

# Define account role ARNs
ROLE_ARNS = {
    "alpha": "arn:aws:iam::401681077342:role/rotate_access",
    "beta": "arn:aws:iam::891612586321:role/rotatekey",
    # Add other accounts here if needed
}

IAM_USER_NAMES = ["dummy", "dummysec"]  # List of IAM usernames to manage keys for

# Hardcoded SecretId
SECRET_ID = "test"  # Replace with your actual SecretId

def lambda_handler(event, context):
    # Use the hardcoded SecretId
    secret_id = SECRET_ID

    # Retrieve the existing secret value
    try:
        existing_secret = secrets_client.get_secret_value(SecretId=secret_id)
        if 'SecretString' in existing_secret:
            secret_data = json.loads(existing_secret['SecretString'])
        else:
            secret_data = {}
    except Exception as e:
        print(f"Error retrieving secret {secret_id}: {str(e)}")
        return

    # Iterate over each account configuration (alpha, beta, etc.)
    for account_alias, role_arn in ROLE_ARNS.items():
        # Assume role in target account
        assumed_role = sts_client.assume_role(
            RoleArn=role_arn,
            RoleSessionName=f"AssumeRoleSession-{account_alias}"
        )
        
        # Retrieve temporary credentials
        credentials = assumed_role['Credentials']
        
        # Create an IAM client in the target account with assumed role credentials
        iam_client = boto3.client(
            'iam',
            aws_access_key_id=credentials['AccessKeyId'],
            aws_secret_access_key=credentials['SecretAccessKey'],
            aws_session_token=credentials['SessionToken']
        )

        # Iterate over the list of IAM users
        for iam_user_name in IAM_USER_NAMES:
            try:
                # List and delete old access keys
                existing_keys = iam_client.list_access_keys(UserName=iam_user_name)['AccessKeyMetadata']
                for key in existing_keys:
                    iam_client.delete_access_key(UserName=iam_user_name, AccessKeyId=key['AccessKeyId'])
                    print(f"Deleted old access key {key['AccessKeyId']} for {iam_user_name} in {account_alias}.")

                # Create a new access key for the IAM user
                new_key = iam_client.create_access_key(UserName=iam_user_name)['AccessKey']
                new_access_key_id = new_key['AccessKeyId']
                new_secret_access_key = new_key['SecretAccessKey']
                
                # Update only the specific key-value pairs in the secret data
                secret_data[f"{iam_user_name}.{account_alias}.accesskey"] = new_access_key_id
                secret_data[f"{iam_user_name}.{account_alias}.SecretAccessKey"] = new_secret_access_key

            except Exception as e:
                print(f"Error managing access keys for {iam_user_name} in {account_alias}: {str(e)}")
    
    # Convert the updated secret data to a JSON formatted string
    updated_secret_string = json.dumps(secret_data)

    # Update the provided secret with the modified data
    try:
        secrets_client.update_secret(
            SecretId=secret_id,
            SecretString=updated_secret_string
        )
        print(f"Updated secret {secret_id} successfully.")
    except Exception as e:
        print(f"Error updating secret {secret_id}: {str(e)}")

==================================================================================================================================]

robocopy

# Load the AWS PowerShell Module (Ensure the AWS CLI is configured with proper credentials)
#Import-Module AWSPowerShell

# Fetch secret from AWS Secrets Manager
$SecretName = "test"  # Replace with your actual secret name
$Region = "ap-south-1"  # Replace with your AWS region

# Retrieve the secret
$SecretValue = Get-SECSecretValue -SecretId $SecretName -Region $Region

# Parse the secret value (assuming it is a JSON string with the keys 'AdminUserName' and 'AdminPassword')
$Secret = ConvertFrom-Json $SecretValue.SecretString

# Define Variables (fetched from Secrets Manager)
$SourcePath = "C:\manas\"
$MachineNames = "EC2AMAZ-52FKVRM"
$AdminUserName = $Secret.AdminUserName  # Set from AWS Secret
$AdminPassword = $Secret.AdminPassword  # Set from AWS Secret
$TargetPath = "C:\Target\"
$CleanTargetBeforeCopy = $true
$CopyFilesInParallel = $false

# Convert password to SecureString
$SecurePassword = ConvertTo-SecureString $AdminPassword -AsPlainText -Force

# Define credentials
$Credential = New-Object System.Management.Automation.PSCredential($AdminUserName, $SecurePassword)

# Function to Copy Files using Robocopy
function Copy-WebFiles {
    param (
        [string]$Source,
        [string]$Destination,
        [string]$Machine
    )

    # If CleanTargetBeforeCopy is true, we delete the target folder before copying
    if ($CleanTargetBeforeCopy) {
        Write-Host "Cleaning target directory: $Destination"
        Remove-Item -Recurse -Force -Path $Destination
    }

    # Build Robocopy command
    $robocopyCommand = "robocopy `"$Source`" `"$Destination`" /MIR /Z /XA:H /W:5 /R:3"

    # Execute the robocopy command
    Write-Host "Copying files to $Machine\$Destination"
    Invoke-Command -ComputerName $Machine -Credential $Credential -ScriptBlock {
        param($cmd)
        Invoke-Expression $cmd
    } -ArgumentList $robocopyCommand
}

# Iterate over each target server and copy the files
$MachineNames.Split(',') | ForEach-Object {
    $Machine = $_.Trim()

    if ($CopyFilesInParallel) {
        # Using background jobs to copy files in parallel
        Start-Job -ScriptBlock {
            param($Source, $Destination, $Machine)
            Copy-WebFiles -Source $Source -Destination $Destination -Machine $Machine
        } -ArgumentList $SourcePath, $TargetPath, $Machine
    } else {
        # Perform copying sequentially
        Copy-WebFiles -Source $SourcePath -Destination $TargetPath -Machine $Machine
    }
}

# Wait for all background jobs to complete if running in parallel mode
if ($CopyFilesInParallel) {
    Get-Job | Wait-Job
}


=========================================================================================================================================================================
Write powershell script  of below azure pipeline task

variables:
  WebDeployPackageName: 'ROUX.API.zip'
steps:
- task: ms-vscs-rm.iiswebapp.iiswebappdeploy-task. IISWebAppDeploy@1 
  displayName: 'Deploy IIS App: $ (WebDeploy PackageName) '
  inputs:
    machinesList: '$ (TargetWebServers)'
    AdminUserName: '$ (TFSBuildSALogin)'
    AdminPassword: '$ (TFSBuildSAPassword)'
    WinRMProtocol: Http
    WebDeployPackage: '$ (WebDeployTargetFolder) \$ (WebDeployPackageName)'
    WebsiteName: '$ (WebSiteName)'
    RemoveAdditionalFiles: true
    ExcludeFilesFromAppData: true
    TakeAppOffline: true
    DeployInParallel: false
	


WebSiteName	                 Name of the IIS website where the application will be deployed.
VirtualApplication	         (Optional) Virtual directory or application under the IIS website.
Package	                     Path to the deployment package or files to be deployed.
RemoveAdditionalFilesFlag	 Removes files from the destination directory that are not part of the deployment package.
TakeAppOfflineFlag	         Temporarily takes the application offline during deployment (places app_offline.htm).
SetParametersFile	         Path to the parameters file for transforming deployment settings.
AdditionalArguments	         Extra arguments to pass to the deployment process.
XmlTransformation	         Applies XML transformations (e.g., web.config transformations).
XmlVariableSubstitution	     Replaces tokens in configuration files with pipeline variables.
EnableCustomDeployment	     Runs a custom PowerShell script during deployment.


	
# Define Variables (Replace these with actual values or environment variables)
$MachinesList = "EC2AMAZ-QI688ID"                          # List of target machines
$AdminUserName = "Administrator"                           # Admin username
$AdminPassword = "kIgzNRLn)ZaAW597%Abvr8(a=@J5G?P&"        # Admin password
$WinRMProtocol = "Http"                                    # Protocol for WinRM (Http or Https)
$WebDeployPackage = "C:\Target\static.zip"                            # Deployment package path
$WebsiteName = "reactapp"                                  # IIS Website name
$RemoveAdditionalFiles = $true                             # Remove additional files
$ExcludeFilesFromAppData = $true                           # Exclude files in App_Data
$TakeAppOffline = $true                                    # Take the app offline during deployment
$DeployInParallel = $false                                 # Deploy to multiple servers in parallel

# Convert password to SecureString
$SecurePassword = ConvertTo-SecureString $AdminPassword -AsPlainText -Force

# Create credentials object
$Credential = New-Object System.Management.Automation.PSCredential($AdminUserName, $SecurePassword)

# Function to Deploy IIS Web App
function Deploy-IISWebApp {
    param (
        [string]$Machine,
        [string]$PackagePath,
        [string]$SiteName,
        [PSCredential]$Credential
    )

    # PowerShell Remoting ScriptBlock for Deployment
    $ScriptBlock = {
        param (
            $PackagePath,
            $SiteName,
            $RemoveAdditionalFiles,
            $ExcludeFilesFromAppData,
            $TakeAppOffline
        )
        # Import Web Deploy Module
        Import-Module WebAdministration

        Write-Host "Deploying to IIS site: $SiteName"

        # Stop the site temporarily if TakeAppOffline is true
        if ($TakeAppOffline) {
            Write-Host "Stopping IIS site: $SiteName"
            Stop-Website -Name $SiteName
        }

        # Clean additional files if RemoveAdditionalFiles is true
        if ($RemoveAdditionalFiles) {
            Write-Host "Cleaning files in target directory"
            Remove-Item "C:\manas\*" -Recurse -Force
        }

        # Extract the deployment package
        Write-Host "Extracting package: $PackagePath"
        Expand-Archive -Path $PackagePath -DestinationPath "C:\manas\" -Force

        # Exclude files from App_Data if specified
        if ($ExcludeFilesFromAppData) {
            Write-Host "Excluding files in App_Data"
            Remove-Item "C:\manas\.txt*" -Recurse -Force
        }

        # Start the site after deployment
        Write-Host "Starting IIS site: $SiteName"
        Start-Website -Name $SiteName
    }

    # Invoke Command on Target Machine
    Write-Host "Deploying to machine: $Machine"
    Invoke-Command -ComputerName $Machine -Credential $Credential -ScriptBlock $ScriptBlock -ArgumentList $PackagePath, $SiteName, $RemoveAdditionalFiles, $ExcludeFilesFromAppData, $TakeAppOffline
}

# Deploy to each machine in the MachinesList
$Machines = $MachinesList.Split(',')

if ($DeployInParallel) {
    # Parallel Deployment
    $Jobs = @()
    foreach ($Machine in $Machines) {
        $Jobs += Start-Job -ScriptBlock {
            param($Machine, $WebDeployPackage, $WebsiteName, $Credential)
            Deploy-IISWebApp -Machine $Machine -PackagePath $WebDeployPackage -SiteName $WebsiteName -Credential $Credential
        } -ArgumentList $Machine, $WebDeployPackage, $WebsiteName, $Credential
    }

    # Wait for all jobs to complete
    $Jobs | Wait-Job | Receive-Job
} else {
    # Sequential Deployment
    foreach ($Machine in $Machines) {
        Deploy-IISWebApp -Machine $Machine.Trim() -PackagePath $WebDeployPackage -SiteName $WebsiteName -Credential $Credential
    }
}

=========================================================================================================================================================================



version: 0.2

phases:
  install:
    runtime-versions:
      # Specify the runtime you are using, for example, Node.js or Python
      # nodejs: 14
    commands:
      # Any additional commands required to set up the environment
      echo "Installing dependencies..."

  pre_build:
    commands:
      # Replacing the appspec.yml in the root directory with the one in CD-appspec folder
      echo "Replacing appspec.yml in the root directory..."
      cp CD-appspec/appspec.yml appspec.yml  # Replace root appspec.yml with the one in the CD-appspec folder

  build:
    commands:
      echo "Building the source code..."
      # You can run build commands if required, for example:
      # npm install
      # npm run build

  post_build:
    commands:
      echo "Build completed successfully!"
      # Ensure the changes (appspec.yml replacement) are included in the output artifact
      echo "Preparing source code for output artifact..."
  
artifacts:
  files:
    - '**/*'  # Include everything from the source directory, including the updated appspec.yml
  discard-paths: no  # Retain the directory structure in the artifact

===========================================================================================================================================


AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with Subnet, Internet Gateway, Route Table and Route for North Virginia (us-east-1)

Resources:
  # Create VPC
  MigrationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"  # Define your VPC CIDR block
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: MigrationVPC

  # Create a public subnet in the VPC
  MigrationSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MigrationVPC
      CidrBlock: "10.0.1.0/24"  # Define the subnet CIDR block
      AvailabilityZone: "us-east-1a"  # North Virginia AZ (can be adjusted)
      MapPublicIpOnLaunch: 'false'  # Ensure instances get a public IP
      Tags:
        - Key: Name
          Value: MigrationSubnet-us-east-1a
          
  MigrationSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MigrationVPC
      CidrBlock: "10.0.2.0/24"  # Define the subnet CIDR block
      AvailabilityZone: "us-east-1b"  # North Virginia AZ (can be adjusted)
      MapPublicIpOnLaunch: 'false'  # Ensure instances get a public IP
      Tags:
        - Key: Name
          Value: MigrationSubnet-us-east-1b
          
  MigrationSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MigrationVPC
      CidrBlock: "10.0.3.0/24"  # Define the subnet CIDR block
      AvailabilityZone: "us-east-1c"  # North Virginia AZ (can be adjusted)
      MapPublicIpOnLaunch: 'false'  # Ensure instances get a public IP
      Tags:
        - Key: Name
          Value: MigrationSubnet-us-east-1c
          
  MigrationSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MigrationVPC
      CidrBlock: "10.0.4.0/24"  # Define the subnet CIDR block
      AvailabilityZone: "us-east-1d"  # North Virginia AZ (can be adjusted)
      MapPublicIpOnLaunch: 'false'  # Ensure instances get a public IP
      Tags:
        - Key: Name
          Value: MigrationSubnet-us-east-1d

  MigrationSubnetE:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MigrationVPC
      CidrBlock: "10.0.5.0/24"  # Define the subnet CIDR block
      AvailabilityZone: "us-east-1e"  # North Virginia AZ (can be adjusted)
      MapPublicIpOnLaunch: 'false'  # Ensure instances get a public IP
      Tags:
        - Key: Name
          Value: MigrationSubnet-us-east-1e
          
  MigrationSubnetF:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MigrationVPC
      CidrBlock: "10.0.6.0/24"  # Define the subnet CIDR block
      AvailabilityZone: "us-east-1f"  # North Virginia AZ (can be adjusted)
      MapPublicIpOnLaunch: 'false'  # Ensure instances get a public IP
      Tags:
        - Key: Name
          Value: MigrationSubnet-us-east-1f
          

  # Create an internet gateway
  MigrationInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MigrationInternetGateway

  # Attach the internet gateway to the VPC
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MigrationVPC
      InternetGatewayId: !Ref MigrationInternetGateway

  # Create a route table for public subnet
  MigrationPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MigrationVPC
      Tags:
        - Key: Name
          Value: MigrationPrivateRouteTable

  # Create a default route to the internet (0.0.0.0/0) via the Internet Gateway
  MyRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MigrationPrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MigrationInternetGateway

  # Associate the route table with the subnet
  MigrationSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MigrationSubnetA
      RouteTableId: !Ref MigrationPrivateRouteTable

  MigrationSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MigrationSubnetB
      RouteTableId: !Ref MigrationPrivateRouteTable
      
  MigrationSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MigrationSubnetC
      RouteTableId: !Ref MigrationPrivateRouteTable
      
  MigrationSubnetDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MigrationSubnetD
      RouteTableId: !Ref MigrationPrivateRouteTable
      
  MigrationSubnetERouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MigrationSubnetE
      RouteTableId: !Ref MigrationPrivateRouteTable
      
  MigrationSubnetFRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MigrationSubnetF
      RouteTableId: !Ref MigrationPrivateRouteTable




Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref MigrationVPC
    Export: 
      Name: MigrationVPC

  SubnetIdA:
    Description: "Subnet ID"
    Value: !Ref MigrationSubnetA
    Export: 
      Name: MigrationSubnetA
    
  SubnetIdB:
    Description: "Subnet ID"
    Value: !Ref MigrationSubnetB
    Export: 
      Name: MigrationSubnetB
   
  SubnetIdC:
    Description: "Subnet ID"
    Value: !Ref MigrationSubnetC
    Export: 
      Name: MigrationSubnetC
    
  SubnetIdD:
    Description: "Subnet ID"
    Value: !Ref MigrationSubnetD
    Export: 
      Name: MigrationSubnetD
    
  SubnetIdE:
    Description: "Subnet ID"
    Value: !Ref MigrationSubnetE
    Export: 
      Name: MigrationSubnetE
    
  SubnetIdF:
    Description: "Subnet ID"
    Value: !Ref MigrationSubnetF
    Export: 
      Name: MigrationSubnetF

#  InternetGatewayId:
#    Description: "Internet Gateway ID"
#    Value: !Ref MyInternetGateway

  RouteTableId:
    Description: "Route Table ID"
    Value: !Ref MigrationPrivateRouteTable
    
    
    
============================================================
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MigrationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: my new SSH SG
      VpcId: !ImportValue MigrationVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/16
          

  # Replication Subnet Group
  DMSReplicationSubnetGroup:
    Type: AWS::DMS::ReplicationSubnetGroup
    Properties:
      ReplicationSubnetGroupIdentifier: MyReplicationSubnetGroup
      ReplicationSubnetGroupDescription: Subnet group for DMS replication instance
      SubnetIds:
        - !ImportValue MigrationSubnetA
        - !ImportValue MigrationSubnetB
        - !ImportValue MigrationSubnetC
        - !ImportValue MigrationSubnetD
        - !ImportValue MigrationSubnetE
        - !ImportValue MigrationSubnetF
  
    # Replication Instance
  DMSReplicationInstance:
    Type: AWS::DMS::ReplicationInstance
    Properties: 
      ReplicationInstanceIdentifier: MigrationReplicationInstance
      ReplicationInstanceClass: dms.t2.micro
      EngineVersion: "3.5.2"
      MultiAZ: false
      AllocatedStorage: 20
      NetworkType: "IPv4" 
      ReplicationSubnetGroupIdentifier: !Ref DMSReplicationSubnetGroup
      PubliclyAccessible: false
      AvailabilityZone: us-east-1a # Specify your desired AZ     
      VpcSecurityGroupIds:
        - !Ref MigrationSecurityGroup 
        
    # Source Endpoint (for the database you're migrating from)
  DMSSourceEndpoint:
    Type: AWS::DMS::Endpoint
    Properties:
      EndpointIdentifier: MigrationSourceEndpoint
      EndpointType: source
      EngineName: mysql # Change to the type of your source database (e.g., 'postgres', 'oracle', etc.)
      Username: admin # Your database username
      Password: manas123 #!Sub "{{resolve:secretsmanager:your-secrets-manager-secret:SecretString:password}}"
      ServerName: database-1.c7qiu66yolzn.us-east-1.rds.amazonaws.com # The source DB hostname
      Port: 3306 # The port of your source DB
      SslMode: none
      DatabaseName: testDB # Name of the source database

  # Target Endpoint (for the database you're migrating to)
  DMSTargetEndpoint:
    Type: AWS::DMS::Endpoint
    Properties:
      EndpointIdentifier: MigrationTargetEndpoint
      EndpointType: target
      EngineName: mysql # Change to the type of your target database (e.g., 'postgres', 'oracle', etc.)
      Username: admin # Your target database username
      Password: manas123 #!Sub "{{resolve:secretsmanager:your-secrets-manager-secret:SecretString:password}}"
      ServerName: database-2.c7qiu66yolzn.us-east-1.rds.amazonaws.com # The target DB hostname
      Port: 3306 # The port of your target DB
      SslMode: none
      DatabaseName: demodb # Name of the target database      

Outputs:
  SourceEndpointIdentifier:
    Description: "Source Endpoint Identifier"
    Value: !Ref DMSSourceEndpoint
    Export: 
      Name: DMSSourceEndpointARN

  TargetEndpointIdentifier:
    Description: "Target Endpoint Identifier"
    Value: !Ref DMSTargetEndpoint
    Export: 
      Name: DMSTargetEndpointARN
      
  ReplicationInstanceIdentifier:
    Description: "Replication Instance Identifier"
    Value: !Ref DMSReplicationInstance
    Export: 
      Name: DMSReplicationInstanceARN


==================================================================================================
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # Database Migration Task
  DMSMigrationTask:
    Type: AWS::DMS::ReplicationTask
    Properties:
      ReplicationTaskIdentifier: MigrationTask
      MigrationType: full-load
      SourceEndpointArn: !ImportValue DMSSourceEndpointARN
      TargetEndpointArn: !ImportValue DMSTargetEndpointARN
      ReplicationInstanceArn: !ImportValue DMSReplicationInstanceARN
      ReplicationTaskSettings:      
          !Sub      
              - |-      
                  {      
                      "TargetMetadata": {      
                          "TargetSchema": "",      
                          "SupportLobs": true,           
                          "FullLobMode": false,           
                          "LobChunkSize": 64,           
                          "LimitedSizeLobMode": true,           
                          "LobMaxSize": 32,           
                          "InlineLobMaxSize": 0,           
                          "LoadMaxFileSize": 0,           
                          "ParallelLoadThreads": 0,           
                          "ParallelLoadBufferSize": 0,           
                          "BatchApplyEnabled": false,           
                          "TaskRecoveryTableEnabled": false,           
                          "ParallelLoadQueuesPerThread": 0,           
                          "ParallelApplyThreads": 0,           
                          "ParallelApplyBufferSize": 0,           
                          "ParallelApplyQueuesPerThread": 0           
                      },           
                      "FullLoadSettings": {           
                          "TargetTablePrepMode": "DROP_AND_CREATE",           
                          "CreatePkAfterFullLoad": false,           
                          "StopTaskCachedChangesApplied": false,           
                          "StopTaskCachedChangesNotApplied": false,           
                          "MaxFullLoadSubTasks": 8,           
                          "TransactionConsistencyTimeout": 600,           
                          "CommitRate": 10000           
                      },           
                      "Logging": {           
                          "EnableLogging": true,           
                          "LogComponents": [           
                              {           
                                  "Id": "SOURCE_UNLOAD",           
                                  "Severity": "LOGGER_SEVERITY_DEFAULT"           
                              },           
                              {           
                                  "Id": "SOURCE_CAPTURE",           
                                  "Severity": "LOGGER_SEVERITY_DEFAULT"           
                              },           
                              {           
                                  "Id": "TARGET_LOAD",           
                                  "Severity": "LOGGER_SEVERITY_DEFAULT"           
                              },           
                              {           
                                  "Id": "TARGET_APPLY",           
                                  "Severity": "LOGGER_SEVERITY_DEFAULT"           
                              },           
                              {           
                                  "Id": "TASK_MANAGER",           
                                  "Severity": "LOGGER_SEVERITY_DEFAULT"           
                              }           
                          ],           
                          "CloudWatchLogGroup": null,           
                          "CloudWatchLogStream": null           
                      },           
                      "ControlTablesSettings": {           
                          "historyTimeslotInMinutes": 5,           
                          "ControlSchema": "",           
                          "HistoryTimeslotInMinutes": 5,           
                          "HistoryTableEnabled": false,           
                          "SuspendedTablesTableEnabled": false,           
                          "StatusTableEnabled": false           
                      },           
                      "StreamBufferSettings": {           
                          "StreamBufferCount": 3,           
                          "StreamBufferSizeInMB": 8,           
                          "CtrlStreamBufferSizeInMB": 5           
                      },           
                      "ChangeProcessingDdlHandlingPolicy": {           
                          "HandleSourceTableDropped": true,           
                          "HandleSourceTableTruncated": true,           
                          "HandleSourceTableAltered": true           
                      },           
                      "ErrorBehavior": {           
                          "DataErrorPolicy": "LOG_ERROR",           
                          "DataTruncationErrorPolicy": "LOG_ERROR",           
                          "DataErrorEscalationPolicy": "SUSPEND_TABLE",           
                          "DataErrorEscalationCount": 0,           
                          "TableErrorPolicy": "SUSPEND_TABLE",           
                          "TableErrorEscalationPolicy": "STOP_TASK",           
                          "TableErrorEscalationCount": 0,           
                          "RecoverableErrorCount": -1,           
                          "RecoverableErrorInterval": 5,           
                          "RecoverableErrorThrottling": true,           
                          "RecoverableErrorThrottlingMax": 1800,           
                          "ApplyErrorDeletePolicy": "IGNORE_RECORD",           
                          "ApplyErrorInsertPolicy": "LOG_ERROR",           
                          "ApplyErrorUpdatePolicy": "LOG_ERROR",           
                          "ApplyErrorEscalationPolicy": "LOG_ERROR",           
                          "ApplyErrorEscalationCount": 0,           
                          "ApplyErrorFailOnTruncationDdl": false,           
                          "FullLoadIgnoreConflicts": true,           
                          "FailOnTransactionConsistencyBreached": false,           
                          "FailOnNoTablesCaptured": false           
                      },           
                      "ChangeProcessingTuning": {           
                          "BatchApplyPreserveTransaction": true,           
                          "BatchApplyTimeoutMin": 1,           
                          "BatchApplyTimeoutMax": 30,           
                          "BatchApplyMemoryLimit": 500,           
                          "BatchSplitSize": 0,           
                          "MinTransactionSize": 1000,           
                          "CommitTimeout": 1,           
                          "MemoryLimitTotal": 1024,           
                          "MemoryKeepTime": 60,           
                          "StatementCacheSize": 50           
                      },           
                      "PostProcessingRules": null,           
                      "CharacterSetSettings": null,           
                      "LoopbackPreventionSettings": null,           
                      "BeforeImageSettings": null           
                  }                                   
              -           
                  enable_logging: true,           
                  support_lobs: true          
      TableMappings:           
          !Sub           
              - |-           
                  {           
                      "rules": [           
                          {           
                              "rule-type": "selection",           
                              "rule-id": "1",           
                              "rule-action": "include",           
                              "object-locator": {           
                                  "schema-name": "testDB",           
                                  "table-name": "%"           
                              },           
                              "rule-name": "1"           
                          }           
                      ]           
                  }                                   
              -           
                  db_schema_name: "testDB"                 # which will be migrated           
     
     
     
     
     
     ===================================================================

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create an Oracle RDS instance.

Parameters:
  DBInstanceIdentifier:
    Type: String
    Default: MyOracleDB
    Description: The database instance identifier.

  DBName:
    Type: String
    Default: MyDatabase
    Description: The name of the database to create.

  DBInstanceClass:
    Type: String
    Default: db.m5.large
    AllowedValues:
      - db.m5.large
      - db.m5.xlarge
      - db.m5.2xlarge
      - db.m5.4xlarge
    Description: The RDS instance type.

  AllocatedStorage:
    Type: Number
    Default: 20
    MinValue: 20
    MaxValue: 65536
    Description: The allocated storage size in GB.

  EngineVersion:
    Type: String
    Default: 19.0.0.0.ru-2024-10.rur-2024-10.r1
    Description: The Oracle database engine version.

  MasterUsername:
    Type: String
    Default: admin
    NoEcho: true
    Description: The master username for the database.

  MasterUserPassword:
    Type: String
    NoEcho: true
    Description: The master user password for the database.

  MultiAZ:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: Specifies if the database instance is a Multi-AZ deployment.

  BackupRetentionPeriod:
    Type: Number
    Default: 7
    MinValue: 0
    MaxValue: 35
    Description: The number of days to retain backups.

Resources:
  OracleRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: my new SSH SG
      VpcId: !ImportValue MigrationVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/16
          
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBName: !Ref DBName
      AllocatedStorage: !Ref AllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: oracle-ee
      EngineVersion: !Ref EngineVersion
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      MultiAZ: !Ref MultiAZ
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      VPCSecurityGroups: !Ref OracleRDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      StorageType: gp2
      StorageEncrypted: true
      DeletionProtection: true

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Oracle RDS instance
      SubnetIds:
        - !ImportValue MigrationSubnetA
        - !ImportValue MigrationSubnetB
        - !ImportValue MigrationSubnetC
        - !ImportValue MigrationSubnetD
        - !ImportValue MigrationSubnetE
        - !ImportValue MigrationSubnetF

Outputs:
  RDSInstanceEndpoint:
    Description: The connection endpoint for the RDS database instance.
    Value: !GetAtt RDSInstance.Endpoint.Address

  RDSInstancePort:
    Description: The port for the RDS database instance.
    Value: !GetAtt RDSInstance.Endpoint.Port




I joined Persistent three months ago and have already relocated from Pune to Indore. Due to this recent move, I am unable to relocate again on short notice


•	Around 2.2 years of experience with Oracle JD Edwards Enterprise One and one world
•	Experience in custom reports, programming, documentation, support in different environments
•	Knowledge & Worked on OMW, DD, TDA, BDA, FDA, RDA, POWER FORM, TABLE    - I/O, TC  NER UTB, UDC, PODA ,BI Publisher and Debugging tools
•	Good Knowledge on Creating Interactive and Batch Application,
•	Strong quantitative and analytical skills; Demonstrated leadership and teamwork skills
•	Good exposure to functional areas like Sales and Distribution
•	Well-developed interpersonal and communication skills, having dealt with diverse professionals, Clients & team members at global locations
•	Vibrant team player with belief in taking positive approach towards issue resolution


Skillsets

Environment:	JD Edwards Enterprise One World Xe, E1 8.12, E1 9.1
Databases:	 Oracle, MS Access
             Tools:                                          JD Edwards Tools OL, BDA, DSTR, UTB, RDA, UDC,        
                                                                 TDA, FDA, PODA, NERs, BSVW.


Migrating the CI/CD pipeline from Microsoft Azure to AWS. This involves understanding Azure pipeline task scripts and replicating them in PowerShell. The PowerShell scripts will be used to create a CI/CD pipeline in AWS, leveraging AWS Secrets Manager for secure credential storage. Additionally, a Lambda function will be implemented to automate IAM user access key rotation and update the secrets in AWS Secrets Manager

Develop a CloudFormation template for RDS and AWS DMS services. Automate the infrastructure provisioning by integrating AWS Pipeline with CloudFormation to streamline the deployment of RDS and DMS services

----------------------------------------------------------------------

$secretJson = aws secretsmanager get-secret-value --secret-id MySecret --query SecretString --output text | ConvertFrom-Json
$username = $secretJson.username
$password = $secretJson.password
