import boto3
import os
import json  # To handle JSON formatting for the secret string

# Initialize Boto3 clients
sts_client = boto3.client('sts')
secrets_client = boto3.client('secretsmanager')

# Define account role ARNs (these are examples; replace with actual ARNs)
ROLE_ARNS = {
    "alpha": "arn:aws:iam::4016077342:role/rotate_access",
    # Add other accounts here if needed
}

IAM_USER_NAMES = ["dummy"]  # List of IAM usernames to manage keys for

# Hardcoded SecretId
SECRET_ID = "test"  # Replace with your actual SecretId

def lambda_handler(event, context):
    # Use the hardcoded SecretId
    secret_id = SECRET_ID

    # Iterate over each account configuration (alpha, beta, etc.)
    for account_alias, role_arn in ROLE_ARNS.items():
        # Assume role in target account
        assumed_role = sts_client.assume_role(
            RoleArn=role_arn,
            RoleSessionName=f"AssumeRoleSession-{account_alias}"
        )
        
        # Retrieve temporary credentials
        credentials = assumed_role['Credentials']
        
        # Create an IAM client in the target account with assumed role credentials
        iam_client = boto3.client(
            'iam',
            aws_access_key_id=credentials['AccessKeyId'],
            aws_secret_access_key=credentials['SecretAccessKey'],
            aws_session_token=credentials['SessionToken']
        )

        # Iterate over the list of IAM users
        for iam_user_name in IAM_USER_NAMES:
            try:
                # Create a new access key for the IAM user
                new_key = iam_client.create_access_key(UserName=iam_user_name)['AccessKey']
                new_access_key_id = new_key['AccessKeyId']
                new_secret_access_key = new_key['SecretAccessKey']
                
                # Prepare the secret string in the desired format
                secret_string = {
                    f"{iam_user_name}.{account_alias}.accesskey": new_access_key_id,
                    f"{iam_user_name}.{account_alias}.SecretAccessKey": new_secret_access_key
                }

                # Convert the secret string to a JSON formatted string
                secret_string_json = json.dumps(secret_string)

                # Update the provided secret with the new keys
                secrets_client.update_secret(
                    SecretId=secret_id,  # Use the hardcoded SecretId
                    SecretString=secret_string_json  # Pass the JSON string
                )
                print(f"Updated secret {secret_id} successfully for {iam_user_name} in account {account_alias}.")
                
            except Exception as e:
                print(f"Error creating access key for {iam_user_name} in {account_alias}: {str(e)}")
