# Define Variables (you should replace these with actual values or environment variables)
$SourcePath = "$(WebDeploySourceFolder)"
$MachineNames = "$(TargetWebServers)"
$AdminUserName = "$(TFSBuildSALogin)"
$AdminPassword = "$(TFSBuildSAPassword)"
$TargetPath = "$(WebDeployTargetFolder)"
$CleanTargetBeforeCopy = $true
$CopyFilesInParallel = $false

# Convert password to SecureString
$SecurePassword = ConvertTo-SecureString $AdminPassword -AsPlainText -Force

# Define credentials
$Credential = New-Object System.Management.Automation.PSCredential($AdminUserName, $SecurePassword)

# Function to Copy Files using Robocopy
function Copy-WebFiles {
    param (
        [string]$Source,
        [string]$Destination,
        [string]$Machine
    )

    # If CleanTargetBeforeCopy is true, we delete the target folder before copying
    if ($CleanTargetBeforeCopy) {
        Write-Host "Cleaning target directory: $Destination"
        Remove-Item -Recurse -Force -Path $Destination
    }

    # Build Robocopy command
    $robocopyCommand = "robocopy `"$Source`" `"$Machine\$Destination`" /MIR /Z /XA:H /W:5 /R:3"

    # Execute the robocopy command
    Write-Host "Copying files to $Machine\$Destination"
    Invoke-Command -ComputerName $Machine -Credential $Credential -ScriptBlock {
        param($cmd)
        Invoke-Expression $cmd
    } -ArgumentList $robocopyCommand
}

# Iterate over each target server and copy the files
$MachineNames.Split(',') | ForEach-Object {
    $Machine = $_.Trim()

    if ($CopyFilesInParallel) {
        # Using background jobs to copy files in parallel
        Start-Job -ScriptBlock {
            param($Source, $Destination, $Machine)
            Copy-WebFiles -Source $Source -Destination $Destination -Machine $Machine
        } -ArgumentList $SourcePath, $TargetPath, $Machine
    } else {
        # Perform copying sequentially
        Copy-WebFiles -Source $SourcePath -Destination $TargetPath -Machine $Machine
    }
}

# Wait for all background jobs to complete if running in parallel mode
if ($CopyFilesInParallel) {
    Get-Job | Wait-Job
}
